import * as React from 'react';
import { Navigate, Route, Routes } from 'react-router-dom-v5-compat';
import { QueryParamProvider } from 'use-query-params';
import { ReactRouter5Adapter } from 'use-query-params/adapters/react-router-5';
import { getAllQueryArguments } from './console/utils/router';
import { UrlRoot, usePerspective } from './hooks/usePerspective';

const MetricsPage = React.lazy(() => import(/* webpackChunkName: "MetricsPage" */ './MetricsPage'));
const TargetsPage = React.lazy(
  () => import(/* webpackChunkName: "TargetsPage" */ './targets-page'),
);
const LegacyDashboardsPage = React.lazy(
  () =>
    import(
      /* webpackChunkName: "LegacyDashboardsPage" */ './dashboards/legacy/legacy-dashboard-page'
    ),
);
const AlertingPage = React.lazy(
  () => import(/* webpackChunkName: "AlertingPage" */ './alerting/AlertingPage'),
);
const AlertRulesDetailsPage = React.lazy(
  () => import(/* webpackChunkName: "AlertRulesDetailsPage" */ './alerting/AlertRulesDetailsPage'),
);
const AlertRulesPage = React.lazy(
  () => import(/* webpackChunkName: "AlertRulesPage" */ './alerting/AlertRulesPage'),
);
const AlertsDetailsPage = React.lazy(
  () => import(/* webpackChunkName: "AlertsDetailsPage" */ './alerting/AlertsDetailsPage'),
);
const AlertsPage = React.lazy(
  () => import(/* webpackChunkName: "AlertsPage" */ './alerting/AlertsPage'),
);
const SilenceCreatePage = React.lazy(
  () => import(/* webpackChunkName: "SilenceCreatePage" */ './alerting/SilenceCreatePage'),
);
const SilenceEditPage = React.lazy(
  () => import(/* webpackChunkName: "SilenceEditPage" */ './alerting/SilenceEditPage'),
);
const SilencesDetailsPage = React.lazy(
  () => import(/* webpackChunkName: "SilencesDetailsPage" */ './alerting/SilencesDetailsPage'),
);
const SilencesPage = React.lazy(
  () => import(/* webpackChunkName: "SilencesPage" */ './alerting/SilencesPage'),
);

export const PersesContext = React.createContext(false);

const AlertingPagesRouter: React.FC<{ root: UrlRoot }> = ({ root }) => {
  return (
    <Routes>
      <Route path={`alertrules/:id`} element={<AlertRulesDetailsPage />} />
      <Route path={`alerts/:ruleID`} element={<AlertsDetailsPage />} />
      <Route path={`silences/:id`} element={<SilencesDetailsPage />} />
      <Route path={`silences/:id/edit`} element={<SilenceEditPage />} />

      <Route element={<AlertingPage />}>
        <Route path="alerts" element={<AlertsPage />} />
        <Route path="alertrules" element={<AlertRulesPage />} />
        <Route path="silences" element={<SilencesPage />} />
      </Route>

      {/* This redirect handles the `/${root}/#/alerts?...` link URLs 
      generated by Alertmanager (because the `#` is considered the end of the URL) */}
      <Route path="*" element={<Navigate to={`/${root}/alerts`} replace />} />
    </Routes>
  );
};

const BaseRouter: React.FC<{ root: UrlRoot }> = ({ root }) => (
  <Routes>
    <Route path="silences/~new" element={<SilenceCreatePage />} />

    <Route path="dashboards" element={<LegacyDashboardsPage />} />
    <Route path="dashboards/:dashboardName" element={<LegacyDashboardsPage />} />

    <Route path="graph" element={<PrometheusRouterRedirect root={root} />} />
    <Route path="query-browser" element={<MetricsPage />} />

    <Route path="targets" element={<TargetsPage />} />
    <Route path="targets/:scrapeUrl" element={<TargetsPage />} />

    <Route path="*" element={<AlertingPagesRouter root={root} />} />
  </Routes>
);

const AcmRouter = () => (
  <Routes>
    <Route path="silences/~new" element={<SilenceCreatePage />} />

    <Route path="*" element={<AlertingPagesRouter root="multicloud/monitoring" />} />
  </Routes>
);

const MonitoringRouter = () => {
  const { perspective, urlRoot } = usePerspective();

  return (
    <QueryParamProvider adapter={ReactRouter5Adapter}>
      {(() => {
        switch (perspective) {
          case 'admin':
          case 'virtualization-perspective':
            return <BaseRouter root={urlRoot} />;
          case 'acm':
            return <AcmRouter />;
        }
      })()}
    </QueryParamProvider>
  );
};

// Handles links that have the Prometheus UI's URL format (expected for links in alerts sent by
// Alertmanager). The Prometheus UI specifies the PromQL query with the GET param `g0.expr`, so we
// use that if it exists. Otherwise, just go to the query browser page with no query.
const PrometheusRouterRedirect: React.FC<{ root: UrlRoot }> = ({ root }) => {
  const params = getAllQueryArguments();
  // leaving perspective redirect to future work
  return <Navigate to={`/${root}/query-browser?query0=${params['g0.expr'] || ''}`} />;
};

export default MonitoringRouter;
